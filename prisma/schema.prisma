generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자
model Users {
  id               Int               @id @default(autoincrement())
  userName         String
  userEmail        String            @unique
  birthday         DateTime
  passwordHash     String
  isMentor         Boolean           @default(false)
  mentorCode       String?           @unique
  reportCount      Int               @default(0)
  refreshToken     String
  targetLanguage   String
  isDeleted        Boolean?
  WithdrawalReason WithdrawalReason?

  comments           Comment[]
  commentLikes       CommentLike[]
  questions          Question[]
  reports            Report[]
  menteeTranslations Translations[]
  ocr_images         Ocrimages[]

  // 내가 userA 또는 userB인 채팅방들
  chatRoomsAsUserA ChatRoom[] @relation("ChatRoomUserA")
  chatRoomsAsUserB ChatRoom[] @relation("ChatRoomUserB")

  // 내가 보낸 메시지들
  messagesSent Message[] @relation("MessageSender")

  // 내가 발급한 PairingToken들
  pairingTokens PairingToken[] @relation("UserPairingTokens")
}

// 탈퇴 사유
enum WithdrawalReason {
  personal
  privacy
  low_usage
  service_issue
  other
}

// 번역 및 분석
model Translations {
  id             Int      @id @default(autoincrement())
  menteeId       Int
  originalText   String[]
  translatedText String[]
  createdAt      DateTime @default(now())
  keyConcept     String
  solution       String
  summary        String
  mentee         Users    @relation(fields: [menteeId], references: [id])
}

// 이미지 업로드
model Ocrimages {
  id       Int    @id @default(autoincrement())
  userId   Int
  fileName String
  fileUrl  String
  fileSize Int
  fileType String
  user     Users  @relation(fields: [userId], references: [id])
}

// 카테고리
enum Category {
  study
  free
}

// 신고 사유 선택
enum ReportReason {
  offensive
  sexual
  ad
  etc
}

//질문
model Question {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  createdAt   DateTime @default(now())
  isDeleted   Boolean  @default(false)
  isAnswered  Boolean  @default(false)
  answerCount Int      @default(0)
  category    Category

  userId Int
  user   Users @relation(fields: [userId], references: [id])

  comments    Comment[]
  reports     Report[]
  attachments Attachment[]
}

// 첨부파일
model Attachment {
  id  Int    @id @default(autoincrement())
  url String

  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
}

// 답변
model Comment {
  id         Int           @id @default(autoincrement())
  content    String
  createdAt  DateTime      @default(now())
  deleted    Boolean       @default(false)
  question   Question      @relation(fields: [questionId], references: [id])
  questionId Int
  user       Users         @relation(fields: [userId], references: [id])
  userId     Int
  parentId   Int?
  parent     Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[]     @relation("CommentReplies")
  reports    Report[]
  likes      CommentLike[]
}

// 사용자 신고
model Report {
  id         Int          @id @default(autoincrement())
  reason     ReportReason
  etcReason  String?
  createdAt  DateTime     @default(now())
  reporterId Int
  reporter   Users        @relation(fields: [reporterId], references: [id])
  questionId Int?
  question   Question?    @relation(fields: [questionId], references: [id])
  commentId  Int?
  comment    Comment?     @relation(fields: [commentId], references: [id])
}

// 댓글 좋아요
model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      Users    @relation(fields: [userId], references: [id])
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
}

//채팅
// QR발급
model PairingToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  ownerId   Int
  owner     Users     @relation("UserPairingTokens", fields: [ownerId], references: [id])
  createdAt DateTime  @default(now())
  expiresAt DateTime
  usedAt    DateTime?
}

// 사용자 간 채팅
model ChatRoom {
  id        Int      @id @default(autoincrement())
  userAId   Int
  userBId   Int
  createdAt DateTime @default(now())

  userA    Users     @relation("ChatRoomUserA", fields: [userAId], references: [id])
  userB    Users     @relation("ChatRoomUserB", fields: [userBId], references: [id])
  messages Message[]

  @@unique([userAId, userBId])
}

// 채팅 메시지 기록
model Message {
  id        Int      @id @default(autoincrement())
  roomId    Int
  senderId  Int
  content   String?
  fileUrl   String?
  fileType  String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  room   ChatRoom @relation(fields: [roomId], references: [id])
  sender Users    @relation("MessageSender", fields: [senderId], references: [id])
}
