// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
    id Int @id @default(autoincrement())
    userName String
    userEmail String @unique
    birthday DateTime
    passwordHash String
    isMentor Boolean @default(false)
    mentorCode String? @unique
    reportCount Int @default(0)
    refreshToken String
    menteeTranslations Translations[]
    questions Question[]
    comments Comment[]
    reports Report[]
    commentLikes CommentLike[]
}

model Translations {
    id Int @id @default(autoincrement())
    menteeId Int
    mentee Users @relation(fields: [menteeId], references: [id])
    originalText String[]
    translatedText String[]
    targetLanguage String
    keyConcept String
    createdAt DateTime @default(now())
}

// 카테고리
enum Category {
  study
  free
}

//질문
model Question {
  id Int @id @default(autoincrement())
  title   String
  content String
  createdAt    DateTime    @default(now())
  isDeleted    Boolean     @default(false)
  isAnswered   Boolean     @default(false)
  answerCount  Int         @default(0)
  category     Category

  userId       Int
  user         Users        @relation(fields: [userId], references: [id])
  
  comments      Comment[]
  reports      Report[]
  attachments  Attachment[]
}

// 첨부파일
model Attachment {
  id          Int        @id @default(autoincrement())
  url         String

  questionId  Int
  question    Question   @relation(fields: [questionId], references: [id])
}


// 답변
model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  createdAt   DateTime @default(now())
  deleted Boolean @default(false)
  question    Question @relation(fields: [questionId], references: [id])
  questionId  Int
  user        Users     @relation(fields: [userId], references: [id])
  userId      Int
  parentId    Int?
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")
  reports Report[]
  likes CommentLike[]
}

// 사용자 신고
model Report {
  id Int @id @default(autoincrement())
  reason String
  createdAt DateTime @default(now())
  reporterId Int
  reporter Users @relation(fields: [reporterId], references: [id])
  questionId Int?
  question Question? @relation(fields: [questionId], references: [id])
  commentId Int?
  comment Comment? @relation(fields: [commentId], references: [id])
}

// 댓글 좋아요
model CommentLike {
  id Int @id @default(autoincrement())
  userId Int
  user Users @relation(fields: [userId], references: [id])
  commentId Int?
  comment Comment? @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
}